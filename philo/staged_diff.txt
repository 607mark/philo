diff --git a/philo/Makefile b/philo/Makefile
index a29ba4b..39c945f 100644
--- a/philo/Makefile
+++ b/philo/Makefile
@@ -7,7 +7,8 @@ SRCS =  main.c \
 	mutex_utils.c \
 	philo_routine.c \
 	run.c \
-	time_utils.c
+	time_utils.c \
+	ph_eat.c
 
 OBJS = $(SRCS:.c=.o)
 
diff --git a/philo/init.c b/philo/init.c
index 56b2667..85a6251 100644
--- a/philo/init.c
+++ b/philo/init.c
@@ -15,7 +15,7 @@
 int populate_philos(t_data *data)
 {
     unsigned long long i;
-    
+
     i = 0;
     while(i < data->n_philos - 1)
     {
@@ -23,9 +23,9 @@ int populate_philos(t_data *data)
         data->philos[i].right = &(data->forks[i + 1]);
         i++;
     }
-    data->philos[data->n_philos - 1].left = &(data->forks[data->n_philos - 1]);
     if (data->n_philos > 1)
-        data->philos[data->n_philos - 1].right = &(data->forks[0]);
+    data->philos[data->n_philos - 1].right = &(data->forks[data->n_philos - 1]);
+    data->philos[data->n_philos - 1].left = &(data->forks[0]);
     return (0);
 
 }
diff --git a/philo/monitor_routine.c b/philo/monitor_routine.c
index 3b4d01d..6b788e8 100644
--- a/philo/monitor_routine.c
+++ b/philo/monitor_routine.c
@@ -47,7 +47,7 @@ void *monitor_routine(void *p)
             access_status(1, INTERRUPT, d);
             return NULL;
         }
-        usleep(100);
+        usleep(70);
     }
     return NULL;
 }
diff --git a/philo/ph_eat.c b/philo/ph_eat.c
new file mode 100644
index 0000000..c274972
--- /dev/null
+++ b/philo/ph_eat.c
@@ -0,0 +1,52 @@
+/* ************************************************************************** */
+/*                                                                            */
+/*                                                        :::      ::::::::   */
+/*   ph_eat.c                                           :+:      :+:    :+:   */
+/*                                                    +:+ +:+         +:+     */
+/*   By: mshabano <mshabano@student.hive.fi>        +#+  +:+       +#+        */
+/*                                                +#+#+#+#+#+   +#+           */
+/*   Created: 2025/01/07 22:56:23 by mshabano          #+#    #+#             */
+/*   Updated: 2025/01/07 22:56:26 by mshabano         ###   ########.fr       */
+/*                                                                            */
+/* ************************************************************************** */
+
+#include "philo.h"
+
+int unlock_forks(t_ph *ph)
+{
+    pthread_mutex_unlock(ph->left);
+    pthread_mutex_unlock(ph->right);
+    return (0);
+}
+
+int lock_forks(t_ph *ph)
+{
+    pthread_mutex_lock(ph->left);
+    display_msg(ph, "has taken a fork");
+    if (ph->data->n_philos > 1)
+        pthread_mutex_lock(ph->right);
+    else
+        return (1);
+    display_msg(ph, "has taken a fork");
+    return (0);
+}
+
+int ph_eat(t_ph *ph)
+{
+    if (lock_forks(ph))
+        return (1);
+    display_msg(ph, "is eating");
+    pthread_mutex_lock(&(ph->mutex));
+    ph->last_meal = get_time();
+    (ph->meals)++;
+    pthread_mutex_unlock(&(ph->mutex));
+    if (access_status(0, 0, ph->data) != RUN)
+    {
+        unlock_forks(ph);
+        return (1);
+    }
+    
+    ms_usleep(ph->data->t_to_eat);
+    unlock_forks(ph);
+    return (0);
+}
diff --git a/philo/philo.h b/philo/philo.h
index f7d325a..87abba3 100644
--- a/philo/philo.h
+++ b/philo/philo.h
@@ -78,6 +78,7 @@ void display_msg(t_ph *ph, char *s);
 //routines
 void    *philo_routine(void *p);
 void    *monitor_routine(void *p);
+int ph_eat(t_ph *ph);
 
 //time utils
 unsigned long long get_time(void);
diff --git a/philo/philo_routine.c b/philo/philo_routine.c
index 837ab63..258acb5 100644
--- a/philo/philo_routine.c
+++ b/philo/philo_routine.c
@@ -33,37 +33,6 @@ int ph_think(t_ph *ph, int flag)
         ms_usleep(ph->data->t_to_think);
     return (0);
 }
-
-int ph_eat(t_ph *ph)
-{
-    pthread_mutex_t *first;
-    pthread_mutex_t *second;
-    
-    if (ph->right < ph->left)
-    {
-        first = ph->right;
-        second = ph->left;
-    } else
-    {
-        first = ph->left;
-        second = ph->right;
-    }
-    pthread_mutex_lock(first);
-    display_msg(ph, "has taken a fork");
-    pthread_mutex_lock(second);
-    display_msg(ph, "has taken a fork");
-    display_msg(ph, "is eating");
-    pthread_mutex_lock(&(ph->mutex));
-    ph->last_meal = get_time();
-    (ph->meals)++;
-    pthread_mutex_unlock(&(ph->mutex));
-    if (access_status(0, 0, ph->data) != RUN)
-        return (1);
-    ms_usleep(ph->data->t_to_eat);
-    pthread_mutex_unlock(second);
-    pthread_mutex_unlock(first);
-    return (0);
-}
 int ph_sleep(t_ph *ph)
 {
     display_msg(ph, "is sleeping");
@@ -83,8 +52,6 @@ void *philo_routine(void *p)
     pthread_mutex_unlock(&(ph->mutex));
     if (ph->id % 2)
         ph_think(ph, 0);
-        
-  
     
     while (access_status(0, 0, ph->data) == RUN)
     {
